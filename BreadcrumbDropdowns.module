<?php namespace ProcessWire;

/**
 *
 * Breadcrumb Dropdowns
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class BreadcrumbDropdowns extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Breadcrumb Dropdowns',
			'summary' => 'Adds dropdown menus of page edit links to the breadcrumbs in Page Edit.',
			'version' => '0.1.21',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/BreadcrumbDropdowns',
			'icon' => 'bars',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.83, AdminThemeUikit'
		);
	}

	/**
	 * ProcessPageListRenderJSON if needed for custom Page List labels
	 */
	protected $pplrj;

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('AdminThemeUikit::renderBreadcrumbs', $this, 'modifyBreadcrumbs');
		$this->addHookBefore('ProcessPageEdit::buildForm', $this, 'addDependencies');
		if($this->custom_hooks) {
			$lines = preg_split('/\n|\r/', $this->custom_hooks);
            foreach($lines as $method) {
                $this->addHookBefore($method, $this, 'modifyBreadcrumbs');
            }
		}
	}

	/**
	 * Modify breadcrumbs
	 * @param HookEvent $event
	 */
	protected function modifyBreadcrumbs(HookEvent $event) {

		// Activate dropdowns?
		if(!$this->activateDropdowns()) return;

		// Get instance of ProcessPageListRenderJSON if needed
		if($this->use_page_list_labels) {
			$pages = $this->wire('pages');
			require_once $this->wire()->config->paths->modules . 'Process/ProcessPageList/ProcessPageListRenderJSON.php';
			$this->pplrj = $this->wire(new ProcessPageListRenderJSON($pages->newPage(), $pages->newPageArray()));
		}

		$event->replace = true;
		/* @var AdminThemeUikit $atu */
		$atu = $event->object;

		// Get edited page
		/* @var Page $page */
		$page = $this->wire('process')->getPage();
		// Get parents of edited page
		$parents = $page->parents;

		// Modified code from AdminThemeUikit::renderBreadcrumbs
		if(!$this->wire('user')->isLoggedIn() || $this->wire('input')->get('modal')) {
			$event->return = '';
			return;
		}
		$breadcrumbs = $this->wire('breadcrumbs');
		$out = '';
		if(strpos($this->layout, 'sidenav') === false) {
			$out .= "<li>" . $atu->renderQuickTreeLink() . "</li>";
		}
		$admin_url = $this->wire('config')->urls->admin;
		$is_process_user = $this->wire('process') == 'ProcessUser';
		foreach($breadcrumbs as $key => $breadcrumb) {
			if($is_process_user) {
				// ProcessUser: use standard AdminThemeUikit breadcrumbs
				$title = $breadcrumb->get('titleMarkup');
				if(!$title) $title = $this->wire('sanitizer')->entities1($this->_($breadcrumb->title));
				$out .= "<li><span class='dropdown-toggle no-dropdown'><i class='fa fa-fw fa-angle-right'></i></span><a href='$breadcrumb->url'>$title</a></li>";
			} else {
				// ProcessPageEdit: breadcrumb dropdowns
				// Get corresponding parent page
				$parent = $parents->get($key);
				if(!$parent) continue;
				$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span><a href='{$admin_url}page/?open={$parent->id}'>{$this->getBreadcrumbLabel($parent)}</a>";
				$out .= $this->getBreadcrumbDropdown($parent) . "</li>";
			}
		}

		// Add edited page as extra breadcrumb item
		$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span><a href='{$admin_url}page/?open={$page->id}'>{$this->getBreadcrumbLabel($page)}</a>";
		$out .= $this->getBreadcrumbDropdown($page) . "</li>";

		// Add children as last dropdown
		if($page->numChildren || $page->addable) {
			$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span>";
			$out .= $this->getBreadcrumbDropdown($page, true) . "</li>";
		}

		$out = "<ul class='uk-breadcrumb'>$out</ul>";
		$event->return = $out;

	}

	/**
	 * Get breadcrumb dropdown markup
	 *
	 * @param Page $page
	 * @param bool $is_parent First argument is parent rather than sibling of desired dropdown pages
	 * @return string
	 * @throws WireException
	 */
	protected function getBreadcrumbDropdown($page, $is_parent = false) {

		// Determine $parent and $sibling
		if($is_parent) {
			$parent = $page;
			$sibling = $page->child('include=all');
		} else {
			$parent = $page->parent;
			$sibling = $page;
		}
		$is_user_parent = in_array($parent->id, $this->wire('config')->usersPageIDs);
		$out = '';
		if($sibling->id) {
			foreach($this->getSiblings($sibling) as $p) {
				$class = '';
				$classes = array();
				if(!$is_parent && $p === $sibling) $classes[] = 'page-current';
				if($p->hasStatus('unpublished')) $classes[] = 'page-unpublished';
				if($p->hasStatus('hidden')) $classes[] = 'page-hidden';
				if(count($classes)) $class = " class='" . implode(' ', $classes) . "'";
				if($p->editable) {
					$out .= "<li$class><a class='page-item' href='$p->editUrl'><span class='page-title'>{$this->getBreadcrumbLabel($p)}</span></a></li>";
				} elseif($this->show_uneditable && !$is_user_parent) {
					$out .= "<li$class><span class='page-item uneditable'><span class='page-title'>{$this->getBreadcrumbLabel($p)}</span></span></li>";
				}
			}
		}

		// "Add new" item - not for Admin parents apart from Users
		if($parent->id && $parent->addable && ($parent->template->id !== 2 || $parent->id === 29)) {
			$admin_url = $this->wire('config')->urls->admin;
			if($is_user_parent) {
				$add_new_url = "{$admin_url}access/users/add/?parent_id={$parent->id}";
			} else {
				$add_new_url = "{$admin_url}page/add/?parent_id={$parent->id}";
			}
			$out .= "<li class='add-new'><a class='page-item' href='$add_new_url'><i class='fa fa-fw fa-plus-circle'></i>" . $this->_('Add New') . "</a></li>";
		}

		// Add a note if no dropdown markup
		if(!$out) $out .= "<li><span class='page-item uneditable'><span class='page-title'>" . $this->_('No editable pages') ."</span></span></li>";
		if($out) $out = "<ul class='breadcrumb-dropdown'>$out</ul>";
		return $out;
	}

	/**
	 * Get sibling pages for the current page
	 *
	 * @param Page $page
	 * @return PageArray
	 */
	public function ___getSiblings($page) {
		$num_siblings = $page->parent->numChildren;
		$start = 0;
		if($num_siblings > 25) {
			// $index = $page->index();
			// Workaround for Page::index() issue: https://github.com/processwire/processwire-issues/issues/751
			$index = $this->getPageIndex($page);
			if($index > 12) $start = $index - 12;
			if($num_siblings - $start < 25) $start = $num_siblings - 25;
		}
		// Siblings excluding admin page and the 404 page
		$siblings = $page->siblings("start=$start, limit=25, include=all, template!=admin, id!=27");
		$siblings->filter('listable=1');
		return $siblings;
	}

	/**
	 * Get index of page relative to siblings
	 *
	 * @param Page $page
	 * @return int
	 */
	public function getPageIndex($page) {
		$sibling_ids = array_flip($this->wire('pages')->findIDs("parent=$page->parent, include=all"));
		return (int) $sibling_ids[$page->id];
	}

	/**
	 * Get breadcrumb label
	 *
	 * @param Page $page
	 * @return int
	 */
	protected function getBreadcrumbLabel($page) {
		if($this->use_page_list_labels) {
			// Call ProcessPageListRender::getPageLabel without triggering hooks
			return $this->pplrj->___getPageLabel($page, array('noTags' => true, 'noIcon' => true));
		} else {
			return $this->wire('sanitizer')->entities1($page->get('title|name'));
		}
	}

	/**
	 * Add JS and CSS dependencies
	 *
	 * @param HookEvent $event
	 */
	protected function addDependencies(HookEvent $event) {

		// Activate dropdowns?
		if(!$this->activateDropdowns()) return;

		// Add JS and CSS
		$config = $this->wire('config');
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");

	}

	/**
	 * Should dropdowns be activated?
	 *
	 * @return boolean
	 */
	protected function activateDropdowns() {
		/* @var ProcessPageEdit|ProcessUser $process */
		$process = $this->wire('process');
		// No if not ProcessPageEdit or ProcessUser
		if($process != 'ProcessPageEdit' && $process != 'ProcessUser') return false;
		$segment = $this->wire('input')->urlSegment1;
		if($process == 'ProcessPageEdit') {
			// No if not ProcessPageEdit execute()
			if($segment) return false;
		} elseif($process == 'ProcessUser') {
			// No if not ProcessUser executeEdit()
			if($segment !== 'edit') return false;
		}
		$page = $process->getPage();
		// No if cannot get $page (e.g. no edit access)
		if(!$page || !$page->id) return false;
		// Otherwise, yes
		return true;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {

		$modules = $this->wire('modules');

		/* @var InputfieldCheckbox $f */
		$f = $modules->InputfieldCheckbox;
		$f_name = 'show_uneditable';
		$f->name = $f_name;
		$f->label = $this->_('Include uneditable pages in dropdowns');
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$inputfields->add($f);

		/* @var InputfieldCheckbox $f */
		$f = $modules->InputfieldCheckbox;
		$f_name = 'use_page_list_labels';
		$f->name = $f_name;
		$f->label = $this->_('Use custom labels defined for Page List');
		$f->notes = $this->_('If checked any custom template setting for "List of fields to display in the admin Page List" will be used for the breadcrumbs and dropdowns.');
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$inputfields->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'custom_hooks';
		$f->name = $f_name;
		$f->label = $this->_('Custom hooks');
		$f->description = $this->_('Define custom hooks if you are using a custom Admin Theme. One hook per line.');
		$f->value = $this->$f_name;
		$f->notes = $this->_('Example: MyAdminTheme::renderBreadcrumbs');
		$f->rows = 3;
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);
	}

}
