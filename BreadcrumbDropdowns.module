<?php namespace ProcessWire;

class BreadcrumbDropdowns extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Breadcrumb Dropdowns',
			'summary' => 'Adds dropdown menus to the breadcrumbs in ProcessPageEdit, ProcessTemplate and ProcessField.',
			'version' => '0.3.11',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/BreadcrumbDropdowns',
			'icon' => 'bars',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.83, AdminThemeUikit, PHP>=5.4.0'
		);
	}

	/**
	 * ProcessPageListRenderJSON if needed for custom Page List labels
	 */
	protected $pplrj;

	/**
	 * "Add New" URLs for supported Processes
	 * Inconsistent trailing slashes needed: https://github.com/processwire/processwire-issues/issues/1373
	 */
	protected $add_urls = [
		'ProcessTemplate' => 'setup/template/add',
		'ProcessField' => 'setup/field/add',
		'ProcessLanguage' => 'setup/languages/add/',
		'ProcessRole' => 'access/roles/add/',
		'ProcessPermission' => 'access/permissions/add/',
	];

	/**
	 * Label for "Add New" links
	 */
	protected $add_label;

	/**
	 * Construct
	 */
	public function __construct() {
		$this->add_new_position = 'bottom';
		parent::__construct();
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->add_label = $this->_('Add New');
		$this->addHookAfter('ProcessController::execute', $this, 'afterProcessController');
	}

	/**
	 * After ProcessController::execute
	 *
	 * @param HookEvent $event
	 */
	protected function afterProcessController(HookEvent $event) {
		if(!$this->activateDropdowns()) return;
		// Add JS and CSS dependencies
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");

		// Hook breadcrumbs render
		$this->addHookBefore('AdminThemeUikit::renderBreadcrumbs', $this, 'modifyBreadcrumbs');
		if($this->custom_hooks) {
			$lines = explode("\n", str_replace("\r", "", $this->custom_hooks));
			foreach($lines as $method) {
				$this->addHookBefore($method, $this, 'modifyBreadcrumbs');
			}
		}
	}

	/**
	 * Is the supplied Process supported by this module?
	 *
	 * @param Process $process
	 * @return boolean
	 */
	protected function isSupportedProcess(Process $process) {
		$process = (string) $process;
		$segment = $this->wire()->input->urlSegment1;
		// Supported Processes as Process name => valid URL segments
		$supported_processes = [
			'ProcessPageEdit' => [''],
			'ProcessUser' => ['edit'],
			'ProcessTemplate' => ['edit'],
			'ProcessField' => ['edit'],
			'ProcessLanguage' => ['edit'],
			'ProcessRole' => ['edit'],
			'ProcessPermission' => ['edit'],
			'ProcessLogger' => ['view'],
		];
		return isset($supported_processes[$process]) && in_array($segment, $supported_processes[$process]);
	}

	/**
	 * Should dropdowns be activated?
	 *
	 * @return boolean
	 */
	protected function ___activateDropdowns() {
		$process = $this->wire()->process;
		if($process == 'ProcessPageEdit' || $process == 'ProcessUser') {
			$page = $process->getPage();
			// No if cannot get $page (e.g. no edit access)
			if(!$page || !$page->id) return false;
		}
		return $this->isSupportedProcess($process);
	}

	/**
	 * Modify breadcrumbs
	 *
	 * @param HookEvent $event
	 */
	protected function modifyBreadcrumbs(HookEvent $event) {
		/** @var AdminThemeUikit $atu */
		$atu = $event->object;
		// In case of custom theme that doesn't extend AdminThemeUikit
		if(!$atu instanceof AdminThemeUikit) $atu = $this->wire()->modules->get('AdminThemeUikit');
		$event->replace = true;

		// From AdminThemeUikit::renderBreadcrumbs
		if(!$this->wire()->user->isLoggedIn() || $this->wire()->input->get('modal')) {
			$event->return = '';
			return;
		}

		$out = '';
		$process = $this->wire()->process;
		switch($process) {
			case 'ProcessPageEdit':
			case 'ProcessUser':
				$out = $this->pageEditBreadcrumbs($atu);
				break;
			case 'ProcessTemplate':
				$out = $this->templateBreadcrumbs($atu);
				break;
			case 'ProcessField':
				$out = $this->fieldBreadcrumbs($atu);
				break;
			case 'ProcessLanguage':
			case 'ProcessRole':
			case 'ProcessPermission':
			case 'ProcessLogger':
				$out = $this->genericBreadcrumbs($atu);
				break;
		}
		$event->return = $out;
	}

	/**
	 * Render AdminThemeUikit breadcrumbs
	 *
	 * @param AdminThemeUikit $atu
	 * @return string
	 */
	protected function atuBreadcrumbs(AdminThemeUikit $atu) {
		$out = '';
		if(strpos($atu->layout, 'sidenav') === false) {
			$out .= "<li>" . $atu->renderQuickTreeLink() . "</li>";
		}
		foreach($this->wire()->breadcrumbs as $breadcrumb) {
			$out .= $this->atuBreadcrumb($breadcrumb);
		}
		return $out;
	}

	/**
	 * Render individual AdminThemeUikit breadcrumb (slightly modified for styling consistency)
	 *
	 * @param Breadcrumb $breadcrumb
	 * @return string
	 */
	protected function atuBreadcrumb(Breadcrumb $breadcrumb) {
		$title = $breadcrumb->get('titleMarkup');
		if(!$title) $title = $this->wire()->sanitizer->entities1($this->_($breadcrumb->title));
		return "<li><span class='dropdown-toggle no-dropdown'><i class='fa fa-fw fa-angle-right'></i></span><a href='$breadcrumb->url'>$title</a></li>";
	}

	/**
	 * Render generic Process breadcrumbs from nav JSON
	 *
	 * @param AdminThemeUikit $atu
	 * @return string
	 */
	protected function genericBreadcrumbs(AdminThemeUikit $atu) {
		$out = $this->atuBreadcrumbs($atu);
		$process = (string) $this->wire()->process;
		$input_url = $this->wire()->input->url(true);
		$page_url = $this->wire()->page->url;
		$dropdown = '';
		$current = '';
		// Dropdown items
		$json = $this->wire()->process->___executeNavJSON();
		if($json) {
			$data = wireDecodeJSON($json);
			if(!empty($data['list'])) {
				foreach($data['list'] as $item) {
					// Remove any secondary info in <small> tags from the label (itemLabel2)
					$label = preg_replace( '/( <small>.*?<\/small>)/i', '', $item['label']);
					$class = '';
					if($page_url . $item['url'] === $input_url) {
						$current = $label;
						$class = ' class="item-current"';
					}
					$dropdown .= "<li$class><a class='inner-item' href='{$page_url}{$item['url']}'><span class='item-title'>{$label}</span></a></li>";
				}
			}
		}
		// Add New
		if(!empty($this->add_urls[$process])) {
			$add_new_url = $this->wire()->config->urls->admin . $this->add_urls[$process];
			$add_new = "<li class='add-new'><a class='inner-item' href='{$add_new_url}'><i class='fa fa-fw fa-plus-circle'></i>{$this->add_label}</a></li>";
			if($this->add_new_position === 'top') {
				$dropdown = $add_new . $dropdown;
			} else {
				$dropdown = $dropdown . $add_new;
			}
		}
		// Breadcrumb for current page
		if($dropdown) $out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span>{$current}<ul class='breadcrumb-dropdown'>$dropdown</ul></li>";
		return "<ul class='uk-breadcrumb'>$out</ul>";
	}

	/**
	 * Render Template breadcrumbs
	 *
	 * @param AdminThemeUikit $atu
	 * @return string
	 */
	protected function templateBreadcrumbs(AdminThemeUikit $atu) {
		$templates = $this->wire()->templates;
		$out = $this->atuBreadcrumbs($atu);

		// Add edited template as extra breadcrumb item, with dropdown for all templates
		$url = $this->wire()->input->url;
		$template_id = $this->wire()->input->get->int('id');
		$template = $templates->get($template_id);
		if($template) {
			$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span>{$template->name}<ul class='breadcrumb-dropdown'>";
			// Templates
			$items_out = '';
			foreach($templates->find("sort=name") as $id => $template) {
				if($this->exclude_system_templates && $template->flags & Template::flagSystem) continue;
				$class = $id === $template_id ? ' class="item-current"' : '';
				$items_out .= "<li$class><a class='inner-item' href='{$url}?id={$id}'><span class='item-title'>{$template->name}</span></a></li>";
			}
			// Add New
			$add_new_url = $this->wire()->config->urls->admin . $this->add_urls['ProcessTemplate'];
			$add_new = "<li class='add-new'><a class='inner-item' href='{$add_new_url}'><i class='fa fa-fw fa-plus-circle'></i>{$this->add_label}</a></li>";
			if($this->add_new_position === 'top') {
				$out .= $add_new . $items_out;
			} else {
				$out .= $items_out . $add_new;
			}
			$out .= "</ul></li>";
		}

		return "<ul class='uk-breadcrumb'>$out</ul>";
	}

	/**
	 * Render Field breadcrumbs
	 *
	 * @param AdminThemeUikit $atu
	 * @return string
	 */
	protected function fieldBreadcrumbs(AdminThemeUikit $atu) {
		$fields = $this->wire()->fields;
		$out = $this->atuBreadcrumbs($atu);

		// Add edited field as extra breadcrumb item, with dropdown for all fields
		$url = $this->wire()->input->url;
		$field_id = $this->wire()->input->get->int('id');
		$field = $fields->get($field_id);
		if($field) {
			$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span>{$field->name}<ul class='breadcrumb-dropdown'>";
			// Fields
			$items_out = '';
			foreach($fields->find("sort=name") as $id => $field) {
				if($this->exclude_system_fields && $field->flags & Field::flagSystem) continue;
				$class = $id === $field_id ? ' class="item-current"' : '';
				$items_out .= "<li$class><a class='inner-item' href='{$url}?id={$id}'><span class='item-title'>{$field->name}</span></a></li>";
			}
			// Add New
			$add_new_url = $this->wire()->config->urls->admin . $this->add_urls['ProcessField'];
			$add_new = "<li class='add-new'><a class='inner-item' href='{$add_new_url}'><i class='fa fa-fw fa-plus-circle'></i>{$this->add_label}</a></li>";
			if($this->add_new_position === 'top') {
				$out .= $add_new . $items_out;
			} else {
				$out .= $items_out . $add_new;
			}
			$out .= "</ul></li>";
		}

		return "<ul class='uk-breadcrumb'>$out</ul>";
	}

	/**
	 * Render Page Edit breadcrumbs
	 *
	 * @param AdminThemeUikit $atu
	 * @return string
	 */
	protected function pageEditBreadcrumbs(AdminThemeUikit $atu) {
		// Get instance of ProcessPageListRenderJSON if needed
		if($this->use_page_list_labels) {
			$pages = $this->wire()->pages;
			require_once $this->wire()->config->paths->modules . 'Process/ProcessPageList/ProcessPageListRenderJSON.php';
			$this->pplrj = $this->wire(new ProcessPageListRenderJSON($pages->newPage(), $pages->newPageArray()));
		}

		// Get edited page
		/** @var Page $page */
		$page = $this->wire()->process->getPage();
		// Get parents of edited page in reverse order
		/** @var PageArray $parents */
		$parents = $page->parents->reverse();

		$out = '';
		if(strpos($atu->layout, 'sidenav') === false) {
			$out .= "<li>" . $atu->renderQuickTreeLink() . "</li>";
		}

		$is_process_user = $this->wire()->process == 'ProcessUser';
		$breadcrumbs = $this->wire()->breadcrumbs;
		$bc_count = $breadcrumbs->count;
		$i = 1;
		foreach($breadcrumbs as $breadcrumb) {
			if($is_process_user) {
				// ProcessUser: use AdminThemeUikit default breadcrumb
				$out .= $this->atuBreadcrumb($breadcrumb);
			} else {
				// ProcessPageEdit: breadcrumb dropdowns
				// Try and get corresponding parent page
				$parent = $parents->eq($bc_count - $i);
				$i++;
				// Parent in this position exists and titles match
				if($parent && $parent->title == $breadcrumb->title) {
					$url = $this->getPageEditBreadcrumbUrl($parent);
					$label = $this->getBreadcrumbLabel($parent);
					if($this->use_status_styling) $label = $this->getStatusLabel($parent, $label);
					$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span><a href='$url'>$label</a>";
					$out .= $this->getBreadcrumbDropdown($parent) . "</li>";
				}
				// Unsupported breadcrumb, use AdminThemeUikit default breadcrumb
				else {
					$out .= $this->atuBreadcrumb($breadcrumb);
				}
			}
		}

		// Add edited page as extra breadcrumb item
		$url = $this->getPageEditBreadcrumbUrl($page);
		$label = $this->getBreadcrumbLabel($page);
		if($this->use_status_styling) $label = $this->getStatusLabel($page, $label);
		$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span><a href='$url'>$label</a>";
		$out .= $this->getBreadcrumbDropdown($page) . "</li>";

		// Add children as last dropdown
		if($page->numChildren || $page->addable) {
			$out .= "<li><span class='dropdown-toggle'><i class='fa fa-fw fa-angle-right'></i></span>";
			$out .= $this->getBreadcrumbDropdown($page, true) . "</li>";
		}

		return "<ul class='uk-breadcrumb'>$out</ul>";
	}

	/**
	 * Get URL for a Page Edit breadcrumb
	 *
	 * @param Page $page
	 * @return string
	 */
	protected function getPageEditBreadcrumbUrl(Page $page) {
		$settings = $this->wire()->config->pageEdit;
		if(!empty($settings['editCrumbs']) && $page->editable()) {
			return "./?id=$page->id";
		} else {
			return "../?open=$page->id";
		}
	}

	/**
	 * Get breadcrumb dropdown markup
	 *
	 * @param Page $page
	 * @param bool $is_parent First argument is parent rather than sibling of desired dropdown pages
	 * @return string
	 * @throws WireException
	 */
	protected function getBreadcrumbDropdown($page, $is_parent = false) {
		$config = $this->wire()->config;

		// Determine $parent and $sibling
		if($is_parent) {
			$parent = $page;
			$sibling = $page->child('include=all');
		} else {
			$parent = $page->parent;
			$sibling = $page;
		}
		$out = '';
		if($sibling->id) {
			foreach($this->getSiblings($sibling) as $p) {
				$class = '';
				if(!$is_parent && $p === $sibling) $class = " class='item-current'";
				$label = $this->getBreadcrumbLabel($p);
				$label = $this->getStatusLabel($p, $label);
				if($p->editable) {
					$out .= "<li$class><a class='inner-item' href='$p->editUrl'><span class='item-title'>$label</span></a></li>";
				} elseif($this->show_uneditable && !in_array($p->template->id, $config->userTemplateIDs)) {
					$out .= "<li$class><span class='inner-item uneditable'><span class='item-title'>$label</span></span></li>";
				}
			}
		}

		// "Add new" item - not for Admin parents apart from Users
		if($parent->id && $parent->addable && ($parent->template->id !== 2 || $parent->id === $config->usersPageID)) {
			$admin_url = $config->urls->admin;
			if($parent->id === $config->usersPageID) {
				$add_new_url = "{$admin_url}access/users/add/?parent_id={$parent->id}";
			} else {
				$add_new_url = "{$admin_url}page/add/?parent_id={$parent->id}";
			}
			$add_new = "<li class='add-new'><a class='inner-item' href='$add_new_url'><i class='fa fa-fw fa-plus-circle'></i>{$this->add_label}</a></li>";
			if($this->add_new_position === 'top') {
				$out = $add_new . $out;
			} else {
				$out = $out . $add_new;
			}
		}

		// Add a note if no dropdown markup
		if(!$out) $out .= "<li><span class='inner-item uneditable'><span class='item-title'>" . $this->_('No editable pages') ."</span></span></li>";
		if($out) $out = "<ul class='breadcrumb-dropdown'>$out</ul>";
		return $out;
	}

	/**
	 * Get sibling pages for the current page
	 *
	 * @param Page $page
	 * @return PageArray
	 */
	public function ___getSiblings($page) {
		$num_siblings = $page->parent->numChildren;
		$start = 0;
		if($num_siblings > 25) {
			// $index = $page->index();
			// Workaround for Page::index() issue: https://github.com/processwire/processwire-issues/issues/751
			$index = $this->getPageIndex($page);
			if($index > 12) $start = $index - 12;
			if($num_siblings - $start < 25) $start = $num_siblings - 25;
		}
		// Siblings excluding admin page and the 404 page
		$siblings = $page->siblings("start=$start, limit=25, include=all, template!=admin, id!=27");
		$siblings->filter('listable=1');
		return $siblings;
	}

	/**
	 * Get index of page relative to siblings
	 *
	 * @param Page $page
	 * @return int
	 */
	public function getPageIndex($page) {
		$sibling_ids = array_flip($this->wire()->pages->findIDs("parent=$page->parent, include=all"));
		return (int) $sibling_ids[$page->id];
	}

	/**
	 * Get breadcrumb label
	 *
	 * @param Page $page
	 * @return string
	 */
	protected function getBreadcrumbLabel($page) {
		if($this->use_page_list_labels) {
			// Call ProcessPageListRender::getPageLabel without triggering hooks
			return $this->pplrj->___getPageLabel($page, ['noTags' => true, 'noIcon' => true]);
		} else {
			return $this->wire()->sanitizer->entities1($page->get('title|name'));
		}
	}

	/**
	 * Get label with wrapping markup indicating hidden/unpublished page status if any
	 *
	 * @param Page $page
	 * @param string $label
	 * @return string
	 */
	protected function getStatusLabel($page, $label) {
		$classes = [];
		if($page->hasStatus('hidden')) $classes[] = 'status-hidden';
		if($page->hasStatus('unpublished')) $classes[] = 'status-unpublished';
		if($classes) {
			$class = implode(' ', $classes);
			$label = "<span class='$class'>$label</span>";
		}
		return $label;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$modules = $this->wire()->modules;

		/** @var InputfieldFieldset $fs */
		$fs = $modules->get('InputfieldFieldset');
		$fs->label = $this->_('ProcessPageEdit');
		$inputfields->add($fs);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'show_uneditable';
		$f->name = $f_name;
		$f->label = $this->_('Include uneditable pages in dropdowns');
		$f->columnWidth = 100;
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'use_page_list_labels';
		$f->name = $f_name;
		$f->label = $this->_('Use custom labels defined for Page List');
		$f->notes = $this->_('If checked any custom template setting for "List of fields to display in the admin Page List" will be used for the breadcrumbs and dropdowns.');
		$f->columnWidth = 50;
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'use_status_styling';
		$f->name = $f_name;
		$f->label = $this->_('Style hidden and unpublished pages in breadcrumb menu');
		$f->notes = $this->_('Applies reduced opacity and strikethrough text styling according to page status.');
		$f->columnWidth = 50;
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldFieldset $fs */
		$fs = $modules->get('InputfieldFieldset');
		$fs->label = $this->_('ProcessTemplate');
		$inputfields->add($fs);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'disable_for_templates';
		$f->name = $f_name;
		$f->label = $this->_('Disable dropdowns');
		$f->columnWidth = 50;
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'exclude_system_templates';
		$f->name = $f_name;
		$f->label = $this->_('Exclude system templates');
		$f->columnWidth = 50;
		$f->showIf = 'disable_for_templates!=1';
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldFieldset $fs */
		$fs = $modules->get('InputfieldFieldset');
		$fs->label = $this->_('ProcessField');
		$inputfields->add($fs);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'disable_for_fields';
		$f->name = $f_name;
		$f->label = $this->_('Disable dropdowns');
		$f->columnWidth = 50;
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldCheckbox $f */
		$f = $modules->get('InputfieldCheckbox');
		$f_name = 'exclude_system_fields';
		$f->name = $f_name;
		$f->label = $this->_('Exclude system fields');
		$f->columnWidth = 50;
		$f->showIf = 'disable_for_fields!=1';
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$fs->add($f);

		/** @var InputfieldRadios $f */
		$f = $modules->get('InputfieldRadios');
		$f_name = 'add_new_position';
		$f->name = $f_name;
		$f->label = $this->_('"Add new" position');
		$f->addOption('bottom', $this->_('Bottom'));
		$f->addOption('top', $this->_('Top'));
		$f->optionColumns = 1;
		$f->value = $this->$f_name;
		$inputfields->add($f);

		/** @var InputfieldTextarea $f */
		$f = $modules->get('InputfieldTextarea');
		$f_name = 'custom_hooks';
		$f->name = $f_name;
		$f->label = $this->_('Custom hooks');
		$f->description = $this->_('Define custom hooks if you are using a custom Admin Theme. One hook per line.');
		$f->value = $this->$f_name;
		$f->notes = $this->_('Example: MyAdminTheme::renderBreadcrumbs');
		$f->rows = 3;
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);
	}

}
